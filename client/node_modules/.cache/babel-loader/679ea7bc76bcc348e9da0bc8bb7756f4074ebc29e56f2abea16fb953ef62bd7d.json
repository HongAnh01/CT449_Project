{"ast":null,"code":"import * as yup from \"yup\";\n// import { Form, Field, ErrorMessage } from \"vee-validate\";\nimport { mapActions } from \"pinia\";\nimport { useAuthStore } from \"@/stores/Auth.store\";\n// import toast from \"../assets/js/toasts\";\nexport default {\n  data() {\n    const Loginform = yup.object().shape({\n      username: yup.string().required(\"Tên phải có giá trị.\").min(2, \"Tên phải ít nhất 2 ký tự.\"),\n      password: yup.string().required(\"Mật khẩu phải có giá trị.\")\n    });\n    return {\n      Loginform,\n      toasts: {\n        title: \"Warning\",\n        msg: \"Tên đăng nhập hoặc tài khoản không đúng!\",\n        type: \"warn\",\n        duration: 2000\n      }\n    };\n  },\n  methods: {\n    toast,\n    showPwd() {\n      if (document.querySelector(\"#checkpwd\").checked == true) {\n        document.querySelector(\"#pwd\").type = 'text';\n      } else {\n        document.querySelector(\"#pwd\").type = 'password';\n      }\n    },\n    ...mapActions(useAuthStore, [\"login\"]),\n    async handleLogin(user) {\n      try {\n        await this.login(user);\n        location.href = 'http://localhost:3001/';\n      } catch (error) {\n        this.toast();\n        console.log(error);\n      }\n    }\n  }\n};\n// export default {\n//     data() {\n//         return {\n//             email: '',\n//             password: '',\n//             Errors: [],\n//         };\n//     },\n//     computed: {\n//         usernameRules() {\n//             return [\n//                 value => !!value || 'Username is required',\n//                 value => (value && value.length >= 6) || 'Username must be at least 6 characters'\n//             ];\n//         },\n//         emailRules() {\n//             return [\n//                 value => !!value || 'Email is required',\n//                 value => /.+@.+\\..+/.test(value) || 'Email must be valid'\n//             ];\n//         },\n//         passwordRules() {\n//             return [\n//                 value => !!value || 'Password is required',\n//                 value => (value && value.length >= 8) || 'Password must be at least 8 characters'\n//             ];\n//         }\n//     },\n//     methods: {\n//         async loginUser() {\n//             try {\n//                 const response = await axios.post('http://localhost:3000/api/login', {\n//                     email: this.email,\n//                     password: this.password,\n//                 });\n\n//                 if (response.status === 200) {\n//                     // Đăng nhập thành công, chuyển hướng tới trang chính\n//                     this.$router.push('/dashboard');\n//                 }\n//             } catch (error) {\n//                 if (error.response && error.response.status === 401) {\n//                     this.errorMessage = 'Invalid credentials';\n//                 } else {\n//                     this.errorMessage = 'Error logging in';\n//                 }\n//             }\n//         },\n//     },\n// }","map":{"version":3,"mappings":"AAiCA;AACA;AACA;AACA;AACA;AACA;EACAA;IACA;MACAC,cACAC,SACAC,iCACAC;MACAC,cACAH,SACAC;IACA;IACA;MACAG;MACAC;QACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EACAC;IACAC;IACAC;MACA;QACAC;MACA;QACAA;MACA;IACA;IACA;IACA;MACA;QACA;QACAC;MACA;QACA;QACAC;MACA;IACA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","names":["data","username","string","required","min","password","Loginform","toasts","title","msg","type","duration","methods","toast","showPwd","document","location","console"],"sourceRoot":"src/views","sources":["Login.vue"],"sourcesContent":["<template>\r\n    <v-container fill-height>\r\n        <v-row align=\"center\">\r\n            <!-- Column for Image/Content -->\r\n            <v-col cols=\"12\" md=\"6\" class=\"image-column\">\r\n                <v-img src=\"../assets/login.jpg\" contain></v-img>\r\n            </v-col>\r\n            <!-- Column for Registration Form -->\r\n            <v-col cols=\"12\" md=\"6\">\r\n                <v-card class=\"elevation-12\">\r\n                    <v-card-title class=\"justify-center\">Login</v-card-title>\r\n                    <v-card-text>\r\n                        <v-form @submit.prevent=\"loginUser\">\r\n                            <!-- Email Input -->\r\n                            <v-text-field v-model=\"email\" :rules=\"emailRules\" label=\"Email\" outlined></v-text-field>\r\n                            <!-- Password Input -->\r\n                            <v-text-field v-model=\"password\" :rules=\"passwordRules\" label=\"Password\" type=\"password\"\r\n                                outlined></v-text-field>\r\n                            <div class=\"error-message\">{{ Errors[0] }}</div>\r\n                            <!-- Login Button -->\r\n                            <v-btn type=\"submit\" class=\"login-btn\" color=\"success\" block\r\n                                style=\"padding-top: 24px; padding-bottom: 24px;\">Login</v-btn>\r\n                        </v-form>\r\n                    </v-card-text>\r\n                    <v-card-actions class=\"justify-center\">\r\n                        <span>Need an account? <router-link to=\"/\">Register!</router-link></span>\r\n                    </v-card-actions>\r\n                </v-card>\r\n            </v-col>\r\n        </v-row>\r\n    </v-container>\r\n</template>\r\n<script>\r\nimport * as yup from \"yup\";\r\n// import { Form, Field, ErrorMessage } from \"vee-validate\";\r\nimport { mapActions } from \"pinia\";\r\nimport { useAuthStore } from \"@/stores/Auth.store\";\r\n// import toast from \"../assets/js/toasts\";\r\nexport default {\r\n    data() {\r\n        const Loginform = yup.object().shape({\r\n            username: yup\r\n                .string()\r\n                .required(\"Tên phải có giá trị.\")\r\n                .min(2, \"Tên phải ít nhất 2 ký tự.\"),\r\n            password: yup\r\n                .string()\r\n                .required(\"Mật khẩu phải có giá trị.\")\r\n        });\r\n        return {\r\n            Loginform,\r\n            toasts: {\r\n                title: \"Warning\",\r\n                msg: \"Tên đăng nhập hoặc tài khoản không đúng!\",\r\n                type: \"warn\",\r\n                duration: 2000\r\n            },\r\n        }\r\n    },\r\n    methods: {\r\n        toast,\r\n        showPwd() {\r\n            if (document.querySelector(\"#checkpwd\").checked == true) {\r\n                document.querySelector(\"#pwd\").type = 'text';\r\n            } else {\r\n                document.querySelector(\"#pwd\").type = 'password';\r\n            }\r\n        },\r\n        ...mapActions(useAuthStore, [\"login\"]),\r\n        async handleLogin(user) {\r\n            try {\r\n                await this.login(user);\r\n                location.href = 'http://localhost:3001/';\r\n            } catch (error) {\r\n                this.toast();\r\n                console.log(error);\r\n            }\r\n        },\r\n    },\r\n};\r\n// export default {\r\n//     data() {\r\n//         return {\r\n//             email: '',\r\n//             password: '',\r\n//             Errors: [],\r\n//         };\r\n//     },\r\n//     computed: {\r\n//         usernameRules() {\r\n//             return [\r\n//                 value => !!value || 'Username is required',\r\n//                 value => (value && value.length >= 6) || 'Username must be at least 6 characters'\r\n//             ];\r\n//         },\r\n//         emailRules() {\r\n//             return [\r\n//                 value => !!value || 'Email is required',\r\n//                 value => /.+@.+\\..+/.test(value) || 'Email must be valid'\r\n//             ];\r\n//         },\r\n//         passwordRules() {\r\n//             return [\r\n//                 value => !!value || 'Password is required',\r\n//                 value => (value && value.length >= 8) || 'Password must be at least 8 characters'\r\n//             ];\r\n//         }\r\n//     },\r\n//     methods: {\r\n//         async loginUser() {\r\n//             try {\r\n//                 const response = await axios.post('http://localhost:3000/api/login', {\r\n//                     email: this.email,\r\n//                     password: this.password,\r\n//                 });\r\n\r\n//                 if (response.status === 200) {\r\n//                     // Đăng nhập thành công, chuyển hướng tới trang chính\r\n//                     this.$router.push('/dashboard');\r\n//                 }\r\n//             } catch (error) {\r\n//                 if (error.response && error.response.status === 401) {\r\n//                     this.errorMessage = 'Invalid credentials';\r\n//                 } else {\r\n//                     this.errorMessage = 'Error logging in';\r\n//                 }\r\n//             }\r\n//         },\r\n//     },\r\n// }\r\n\r\n</script>\r\n  \r\n<style scoped>\r\n.error-message {\r\n    color: red;\r\n    font-size: 12px;\r\n    margin-top: 4px;\r\n}\r\n</style>\r\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}