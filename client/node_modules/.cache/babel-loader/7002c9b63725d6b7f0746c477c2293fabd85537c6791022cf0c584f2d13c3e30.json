{"ast":null,"code":"import axios from 'axios';\nconst url = '/api/post';\nexport default class API {\n  // get all the post into database\n  static async getAllPost() {\n    const res = await axios.get(url);\n    return res.data;\n  }\n\n  // get follow id the post into database\n  static async getPostById(id) {\n    const res = await axios.get(`${url}/${id}`);\n    return res.data;\n  }\n\n  // post follow id the post into database\n  static async addPost(post) {\n    const res = await axios.post(url, post);\n    return res.data;\n  }\n\n  // update follow id the post into database\n  static async updatePostById(id, post) {\n    const res = await axios.patch(`${url}/${id}`, post);\n    return res.data;\n  }\n\n  // get follow id the post into database\n  static async Delete(id) {\n    const res = await axios.delete(`${url}/${id}`);\n    return res.data;\n  }\n\n  // register\n  static async registerUser(userData) {\n    try {\n      const response = await fetch('/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (response.ok) {\n        return 'Registration successful';\n      } else {\n        const errorMessage = await response.text();\n        throw new Error(`Registration failed: ${errorMessage}`);\n      }\n    } catch (error) {\n      throw new Error(`Error during registration: ${error.message}`);\n    }\n  }\n\n  //login\n  static async loginUser(userData) {\n    // try {\n    //     const response = await fetch('/api/login', {\n    //         method: 'POST',\n    //         headers: {\n    //             'Content-Type': 'application/json'\n    //         },\n    //         body: JSON.stringify(userData)\n    //     });\n\n    //     if (response.ok) {\n    //         return 'Login successful';\n    //     } else {\n    //         const errorMessage = await response.text();\n    //         throw new Error(`Login failed: ${errorMessage}`);\n    //     }\n    // } catch (error) {\n    //     throw new Error(`Error during login: ${error.message}`);\n    // }\n    try {\n      const response = await axios.post(`${BASE_URL}/login`, userData);\n      return response.data;\n    } catch (error) {\n      console.error('Error logging in:', error);\n      throw new Error('Login failed');\n    }\n  }\n}\n\n// export const login = async (userData) => {\n//     try {\n//       const response = await API.post('/login', userData);\n//       return response.data;\n//     } catch (error) {\n//       throw error;\n//     }\n//   };","map":{"version":3,"names":["axios","url","API","getAllPost","res","get","data","getPostById","id","addPost","post","updatePostById","patch","Delete","delete","registerUser","userData","response","fetch","method","headers","body","JSON","stringify","ok","errorMessage","text","Error","error","message","loginUser","BASE_URL","console"],"sources":["C:/D/learned/2324_HK1_N4/PhatTrienUngDungWEB_NMT/test/client/src/api.js"],"sourcesContent":["import axios from 'axios'\r\nconst url = '/api/post'\r\n\r\nexport default class API {\r\n    // get all the post into database\r\n    static async getAllPost(){\r\n        const res = await axios.get(url);\r\n        return res.data;\r\n    }\r\n\r\n    // get follow id the post into database\r\n    static async getPostById(id){\r\n        const res = await axios.get(`${url}/${id}`);\r\n        return res.data;\r\n    }\r\n\r\n    // post follow id the post into database\r\n    static async addPost(post){\r\n        const res = await axios.post(url, post);\r\n        return res.data;\r\n    }\r\n\r\n    // update follow id the post into database\r\n    static async updatePostById(id, post){\r\n        const res = await axios.patch(`${url}/${id}`, post);\r\n        return res.data;\r\n    }\r\n\r\n    // get follow id the post into database\r\n    static async Delete(id){\r\n        const res = await axios.delete(`${url}/${id}`);\r\n        return res.data;\r\n    }\r\n\r\n    // register\r\n    static async registerUser(userData) {\r\n        try {\r\n            const response = await fetch('/api/register', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(userData)\r\n            });\r\n\r\n            if (response.ok) {\r\n                return 'Registration successful';\r\n            } else {\r\n                const errorMessage = await response.text();\r\n                throw new Error(`Registration failed: ${errorMessage}`);\r\n            }\r\n        } catch (error) {\r\n            throw new Error(`Error during registration: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    //login\r\n    static async loginUser(userData) {\r\n        // try {\r\n        //     const response = await fetch('/api/login', {\r\n        //         method: 'POST',\r\n        //         headers: {\r\n        //             'Content-Type': 'application/json'\r\n        //         },\r\n        //         body: JSON.stringify(userData)\r\n        //     });\r\n\r\n        //     if (response.ok) {\r\n        //         return 'Login successful';\r\n        //     } else {\r\n        //         const errorMessage = await response.text();\r\n        //         throw new Error(`Login failed: ${errorMessage}`);\r\n        //     }\r\n        // } catch (error) {\r\n        //     throw new Error(`Error during login: ${error.message}`);\r\n        // }\r\n        try {\r\n            const response = await axios.post(`${BASE_URL}/login`, userData);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error logging in:', error);\r\n            throw new Error('Login failed');\r\n        }\r\n    }\r\n}\r\n\r\n// export const login = async (userData) => {\r\n//     try {\r\n//       const response = await API.post('/login', userData);\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error;\r\n//     }\r\n//   };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,GAAG,GAAG,WAAW;AAEvB,eAAe,MAAMC,GAAG,CAAC;EACrB;EACA,aAAaC,UAAU,GAAE;IACrB,MAAMC,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAACJ,GAAG,CAAC;IAChC,OAAOG,GAAG,CAACE,IAAI;EACnB;;EAEA;EACA,aAAaC,WAAW,CAACC,EAAE,EAAC;IACxB,MAAMJ,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAE,GAAEJ,GAAI,IAAGO,EAAG,EAAC,CAAC;IAC3C,OAAOJ,GAAG,CAACE,IAAI;EACnB;;EAEA;EACA,aAAaG,OAAO,CAACC,IAAI,EAAC;IACtB,MAAMN,GAAG,GAAG,MAAMJ,KAAK,CAACU,IAAI,CAACT,GAAG,EAAES,IAAI,CAAC;IACvC,OAAON,GAAG,CAACE,IAAI;EACnB;;EAEA;EACA,aAAaK,cAAc,CAACH,EAAE,EAAEE,IAAI,EAAC;IACjC,MAAMN,GAAG,GAAG,MAAMJ,KAAK,CAACY,KAAK,CAAE,GAAEX,GAAI,IAAGO,EAAG,EAAC,EAAEE,IAAI,CAAC;IACnD,OAAON,GAAG,CAACE,IAAI;EACnB;;EAEA;EACA,aAAaO,MAAM,CAACL,EAAE,EAAC;IACnB,MAAMJ,GAAG,GAAG,MAAMJ,KAAK,CAACc,MAAM,CAAE,GAAEb,GAAI,IAAGO,EAAG,EAAC,CAAC;IAC9C,OAAOJ,GAAG,CAACE,IAAI;EACnB;;EAEA;EACA,aAAaS,YAAY,CAACC,QAAQ,EAAE;IAChC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,EAAE;QAC1CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;MACjC,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACO,EAAE,EAAE;QACb,OAAO,yBAAyB;MACpC,CAAC,MAAM;QACH,MAAMC,YAAY,GAAG,MAAMR,QAAQ,CAACS,IAAI,EAAE;QAC1C,MAAM,IAAIC,KAAK,CAAE,wBAAuBF,YAAa,EAAC,CAAC;MAC3D;IACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZ,MAAM,IAAID,KAAK,CAAE,8BAA6BC,KAAK,CAACC,OAAQ,EAAC,CAAC;IAClE;EACJ;;EAEA;EACA,aAAaC,SAAS,CAACd,QAAQ,EAAE;IAC7B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACU,IAAI,CAAE,GAAEqB,QAAS,QAAO,EAAEf,QAAQ,CAAC;MAChE,OAAOC,QAAQ,CAACX,IAAI;IACxB,CAAC,CAAC,OAAOsB,KAAK,EAAE;MACZI,OAAO,CAACJ,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,MAAM,IAAID,KAAK,CAAC,cAAc,CAAC;IACnC;EACJ;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}